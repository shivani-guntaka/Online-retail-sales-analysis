# -*- coding: utf-8 -*-
"""IS_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFN9xLG2xpKpArjLVT56BkszbQD6e_Xd
"""

import pandas as pd

transaction= pd.read_csv('/content/Retail_Data_Transactions.csv')

transaction

response= pd.read_csv('/content/Retail_Data_Response.csv')
response

# Merging tables via common columns
df= transaction.merge(response, on='customer_id', how='left')
df

df.info()

df.describe()

"""Checking and handling Missing values"""

# Check for missing values
df.isnull().sum()

# Since there are only small number of missing values we drop it
df=df.dropna()
df

#Changing datatypes of date and response
df['trans_date']= pd.to_datetime(df['trans_date'])
df['response']= df['response'].astype('int64')
df

df.dtypes

"""Checking for Outliers"""

# By Z-SCORE method
from scipy import stats
import numpy as np
z_scores= np.abs(stats.zscore(df['tran_amount']))
threshold= 3
outliers= z_scores>threshold
print(df[outliers])

z_scores= np.abs(stats.zscore(df['response']))
threshold= 3
outliers= z_scores>threshold
print(df[outliers])

#By Data Visualization i.e., boxplots
import seaborn as sns
import matplotlib.pyplot as plt
sns.boxplot(x=df['tran_amount'])
plt.show()

sns.boxplot(x=df['response'])
plt.show()

# Splitting date into months in a new column
df['month']= df['trans_date'].dt.month
df

# Months with highest transaction amounts
monthly_Sales= df.groupby('month')['tran_amount'].sum()
monthly_Sales= monthly_Sales.sort_values(ascending=False).reset_index().head(5)
monthly_Sales

# Customers with highest number of orders
df["customer_id"].value_counts().head().reset_index()

customer_counts= df['customer_id'].value_counts().reset_index()
customer_counts.columns=['customer_id','count']
top_5= customer_counts.sort_values(by='count', ascending=False).head(5)
top_5

sns.barplot(x='customer_id',y='count',data=top_5)

# Customers with highest value of orders
customer_sales= df.groupby('customer_id')['tran_amount'].sum().reset_index()
customer_sales
top_5_sales= customer_sales.sort_values(by='tran_amount', ascending=False).head(5)
top_5_sales

sns.barplot(x='customer_id',y='tran_amount',data=top_5_sales)

"""## Advanced Analytics

### Time Series Analysis
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

df['month_year'] = df['trans_date'].dt.to_period('M')
monthly_sales = df.groupby('month_year')['tran_amount'].sum()

# Convert the PeriodIndex to DateTimeIndex
monthly_sales.index = monthly_sales.index.to_timestamp()

plt.figure(figsize=(12,6))  # Increase the size of the figure
plt.plot(monthly_sales.index, monthly_sales.values)  # Plot the data
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))  # Format the x-axis labels
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=6))  # Set the x-axis interval
plt.xlabel('Month-Year')
plt.ylabel('Sales')
plt.title('Monthly Sales')
plt.xticks(rotation=45)  # Rotate the x-axis labels
plt.tight_layout()  # Adjust the layout for better visibility
plt.show()

"""### Cohort Segmentation"""

# Recency will be the maximum of trans_date
recency = df.groupby('customer_id')['trans_date'].max()

# Frequency will be the count of transactions- number of times a customer has made purchases
frequency = df.groupby('customer_id')['trans_date'].count()

# Monetary will be the sum of tran_amount- total money spent by a customer
monetary = df.groupby('customer_id')['tran_amount'].sum()

# Combine all three into a DataFrame
rfm = pd.DataFrame({'recency': recency, 'frequency': frequency, 'monetary': monetary})

# Visualinsing frequency
sns.distplot(rfm['frequency'], color = 'skyblue')

def segment_customer(row):
  if row['recency'].year>=2012 and row['frequency']>=15 and row['monetary']>1000:
    return 'P0'
  elif (2011<=row['recency'].year<2012) and (10<row['frequency']<15) and (500< row['monetary']<=1000):
    return 'P1'
  else:
    return 'P2'
rfm['Segment'] = rfm.apply(segment_customer,axis=1)
rfm

set(rfm['Segment'])

"""### Churn Analysis"""

# Count the number of churned and active customers
churn_counts = df['response'].value_counts()

# Plot
churn_counts.plot(kind='bar')
churn_counts.plot(kind='pie',autopct)

churn_counts.plot(kind='pie', autopct='%1.1f%%', colors = ['skyblue', 'pink'])
plt.show()

"""### Analyzing top customers"""

# Top 5 customers
top_5_customers = monetary.sort_values(ascending=False).head(5).index

# Filter transactions of top 5 customers
top_customers_df = df[df['customer_id'].isin(top_5_customers)]

# Plot their monthly sales
top_customers_sales = top_customers_df.groupby(['customer_id', 'month_year'])['tran_amount'].sum().unstack(level=0)
top_customers_sales.plot(kind='line')

df

from google.colab import files
df.to_csv('MainData.csv',encoding = 'utf-8-sig')
files.download('MainData.csv')

rfm.to_csv('Advanced_analysis.csv',encoding = 'utf-8-sig')
files.download('Advanced_analysis.csv')
